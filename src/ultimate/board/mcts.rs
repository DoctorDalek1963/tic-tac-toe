//! This module provides functionality for an AI based on Monte Carlo tree search (MCTS).

use super::GlobalBoard;
use crate::ultimate::GlobalCoord;

#[rustfmt::skip]
const ALL_CELLS: [GlobalCoord; 81] = [
    (0, 0, (0, 0)), (0, 0, (1, 0)), (0, 0, (2, 0)),
    (0, 0, (0, 1)), (0, 0, (1, 1)), (0, 0, (2, 1)),
    (0, 0, (0, 2)), (0, 0, (1, 2)), (0, 0, (2, 2)),

    (1, 0, (0, 0)), (1, 0, (1, 0)), (1, 0, (2, 0)),
    (1, 0, (0, 1)), (1, 0, (1, 1)), (1, 0, (2, 1)),
    (1, 0, (0, 2)), (1, 0, (1, 2)), (1, 0, (2, 2)),

    (2, 0, (0, 0)), (2, 0, (1, 0)), (2, 0, (2, 0)),
    (2, 0, (0, 1)), (2, 0, (1, 1)), (2, 0, (2, 1)),
    (2, 0, (0, 2)), (2, 0, (1, 2)), (2, 0, (2, 2)),

    (0, 1, (0, 0)), (0, 1, (1, 0)), (0, 1, (2, 0)),
    (0, 1, (0, 1)), (0, 1, (1, 1)), (0, 1, (2, 1)),
    (0, 1, (0, 2)), (0, 1, (1, 2)), (0, 1, (2, 2)),

    (1, 1, (0, 0)), (1, 1, (1, 0)), (1, 1, (2, 0)),
    (1, 1, (0, 1)), (1, 1, (1, 1)), (1, 1, (2, 1)),
    (1, 1, (0, 2)), (1, 1, (1, 2)), (1, 1, (2, 2)),

    (2, 1, (0, 0)), (2, 1, (1, 0)), (2, 1, (2, 0)),
    (2, 1, (0, 1)), (2, 1, (1, 1)), (2, 1, (2, 1)),
    (2, 1, (0, 2)), (2, 1, (1, 2)), (2, 1, (2, 2)),

    (0, 2, (0, 0)), (0, 2, (1, 0)), (0, 2, (2, 0)),
    (0, 2, (0, 1)), (0, 2, (1, 1)), (0, 2, (2, 1)),
    (0, 2, (0, 2)), (0, 2, (1, 2)), (0, 2, (2, 2)),

    (1, 2, (0, 0)), (1, 2, (1, 0)), (1, 2, (2, 0)),
    (1, 2, (0, 1)), (1, 2, (1, 1)), (1, 2, (2, 1)),
    (1, 2, (0, 2)), (1, 2, (1, 2)), (1, 2, (2, 2)),

    (2, 2, (0, 0)), (2, 2, (1, 0)), (2, 2, (2, 0)),
    (2, 2, (0, 1)), (2, 2, (1, 1)), (2, 2, (2, 1)),
    (2, 2, (0, 2)), (2, 2, (1, 2)), (2, 2, (2, 2)),
];

impl GlobalBoard {
    fn legal_moves(&self) -> Vec<GlobalCoord> {
        match self.next_local_board() {
            None => ALL_CELLS.to_vec(),
            #[rustfmt::skip]
            Some((x, y)) => vec![
                (x, y, (0, 0)), (x, y, (1, 0)), (x, y, (2, 0)),
                (x, y, (0, 1)), (x, y, (1, 1)), (x, y, (2, 1)),
                (x, y, (0, 2)), (x, y, (1, 2)), (x, y, (2, 2)),
            ],
        }
        .iter()
        .filter_map(|&(x, y, (lx, ly))| {
            if self.local_boards[x][y].cells[lx][ly].is_none() {
                Some((x, y, (lx, ly)))
            } else {
                None
            }
        })
        .collect()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::ultimate::test_utils::make_global_board;

    #[test]
    fn legal_moves_test() {
        let board = GlobalBoard::default();
        assert_eq!(board.legal_moves(), ALL_CELLS);

        let board = make_global_board! {
            next = None,
            (_; _ X _; _) (_; _ X _; _) (_; _ X _; _);
            (_; _ X _; _) (O O O; O X O; O O O) (_; _ X _; _);
            (_; _ X _; _) (_; _ X _; _) (_; _ X _; _);
        };
        #[rustfmt::skip]
        assert_eq!(
            board.legal_moves(),
            vec![
                (0, 0, (0, 0)), (0, 0, (1, 0)), (0, 0, (2, 0)),
                (0, 0, (0, 1)), (0, 0, (2, 1)),
                (0, 0, (0, 2)), (0, 0, (1, 2)), (0, 0, (2, 2)),

                (1, 0, (0, 0)), (1, 0, (1, 0)), (1, 0, (2, 0)),
                (1, 0, (0, 1)), (1, 0, (2, 1)),
                (1, 0, (0, 2)), (1, 0, (1, 2)), (1, 0, (2, 2)),

                (2, 0, (0, 0)), (2, 0, (1, 0)), (2, 0, (2, 0)),
                (2, 0, (0, 1)), (2, 0, (2, 1)),
                (2, 0, (0, 2)), (2, 0, (1, 2)), (2, 0, (2, 2)),

                (0, 1, (0, 0)), (0, 1, (1, 0)), (0, 1, (2, 0)),
                (0, 1, (0, 1)), (0, 1, (2, 1)),
                (0, 1, (0, 2)), (0, 1, (1, 2)), (0, 1, (2, 2)),

                (2, 1, (0, 0)), (2, 1, (1, 0)), (2, 1, (2, 0)),
                (2, 1, (0, 1)), (2, 1, (2, 1)),
                (2, 1, (0, 2)), (2, 1, (1, 2)), (2, 1, (2, 2)),

                (0, 2, (0, 0)), (0, 2, (1, 0)), (0, 2, (2, 0)),
                (0, 2, (0, 1)), (0, 2, (2, 1)),
                (0, 2, (0, 2)), (0, 2, (1, 2)), (0, 2, (2, 2)),

                (1, 2, (0, 0)), (1, 2, (1, 0)), (1, 2, (2, 0)),
                (1, 2, (0, 1)), (1, 2, (2, 1)),
                (1, 2, (0, 2)), (1, 2, (1, 2)), (1, 2, (2, 2)),

                (2, 2, (0, 0)), (2, 2, (1, 0)), (2, 2, (2, 0)),
                (2, 2, (0, 1)), (2, 2, (2, 1)),
                (2, 2, (0, 2)), (2, 2, (1, 2)), (2, 2, (2, 2)),
            ]
        );

        let board = make_global_board! {
            next = (1, 1),
            () () ();
            () (_; _ X _; _) ();
            () () ();
        };
        #[rustfmt::skip]
        assert_eq!(
            board.legal_moves(),
            vec![
                (1, 1, (0, 0)), (1, 1, (1, 0)), (1, 1, (2, 0)),
                (1, 1, (0, 1)), (1, 1, (2, 1)),
                (1, 1, (0, 2)), (1, 1, (1, 2)), (1, 1, (2, 2)),
            ]
        );

        let board = make_global_board! {
            next = (0, 0),
            () () ();
            (_; _ X _; O O _) (_; O X X; O _ _) (_; _ O _; _);
            (O _ _; X _ _; X _ _) (_; X _ _; _) ();
        };
        #[rustfmt::skip]
        assert_eq!(
            board.legal_moves(),
            vec![
                (0, 0, (0, 0)), (0, 0, (1, 0)), (0, 0, (2, 0)),
                (0, 0, (0, 1)), (0, 0, (1, 1)), (0, 0, (2, 1)),
                (0, 0, (0, 2)), (0, 0, (1, 2)), (0, 0, (2, 2)),
            ]
        );

        let board = make_global_board! {
            next = (1, 1),
            (_; _ X _; _) () ();
            (_; _ X _; O O _) (_; O X X; O _ _) (_; _ O _; _);
            (O _ _; X _ _; X _ _) (_; X _ _; _) ();
        };
        assert_eq!(
            board.legal_moves(),
            vec![
                (1, 1, (0, 0)),
                (1, 1, (1, 0)),
                (1, 1, (2, 0)),
                (1, 1, (1, 2)),
                (1, 1, (2, 2)),
            ]
        );
    }
}
